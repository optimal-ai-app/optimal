import React, { useState, useRef } from 'react'
import {
  View,
  Text,
  ScrollView,
  TouchableOpacity,
  Platform,
  TextInput
} from 'react-native'
import { useRouter } from 'expo-router'
import Animated, { FadeInDown } from 'react-native-reanimated'
import { Calendar, CircleCheck as CheckCircle } from 'lucide-react-native'
import DateTimePicker from '@react-native-community/datetimepicker'

import { Header } from '../Header'
import { InputField } from '../InputField'
import { styles } from './ManualGoalForm.styles'
import { colors } from '../../constants/colors'
import { useAddGoal } from '../../stores'
import { useUserId } from '../../stores/userStore'
import { Goal } from '../../stores/types'

interface ManualGoalFormProps {
  onGoalCreated?: (goal: {
    title: string
    description: string
    completionDate: Date
  }) => void
}

export const ManualGoalForm: React.FC<ManualGoalFormProps> = ({
  onGoalCreated
}) => {
  const router = useRouter()
  const addGoal = useAddGoal()
  const userId = useUserId()

  const [title, setTitle] = useState('')
  const [description, setDescription] = useState('')
  const [dueDate, setDueDate] = useState<Date | null>(null)
  const [showDatePicker, setShowDatePicker] = useState(false)
  const [isSubmitted, setIsSubmitted] = useState(false)
  const [createdGoal, setCreatedGoal] = useState<{
    title: string
    description: string
    completionDate: Date
  } | null>(null)
  const [isCreating, setIsCreating] = useState(false)

  const webDateInputRef = useRef<TextInput>(null)

  const isFormValid = title.trim() && description.trim() && dueDate

  const handleDatePress = () => {
    if (Platform.OS === 'web') {
      webDateInputRef.current?.focus()
    } else {
      setShowDatePicker(true)
    }
  }

  const handleDateChange = (event: any, selectedDate?: Date) => {
    setShowDatePicker(false)
    if (selectedDate) {
      const today = new Date()
      today.setHours(0, 0, 0, 0)
      if (selectedDate >= today) {
        setDueDate(selectedDate)
      }
    }
  }

  const handleWebDateChange = (dateString: string) => {
    if (dateString) {
      const selectedDate = new Date(dateString)
      const today = new Date()
      today.setHours(0, 0, 0, 0)

      if (selectedDate >= today) {
        setDueDate(selectedDate)
      }
    }
  }

  const createGoalObject = (): Goal => {
    return {
      id: '', // Will be generated by backend
      title: title.trim(),
      description: description.trim(),
      createdAt: new Date(),
      dueDate: dueDate!,
      status: 'active',
      tags: [],
      progress: 0,
      updatedAt: new Date(),
      streak: 0
    }
  }

  const handleCreateGoal = async () => {
    if (!isFormValid || !userId) return
    setIsCreating(true)
    try {
      const goalData = createGoalObject()
      await addGoal(goalData)
      const goal = {
        title: title.trim(),
        description: description.trim(),
        completionDate: dueDate!
      }
      setCreatedGoal(goal)
      setIsSubmitted(true)
      onGoalCreated?.(goal)
    } catch (error) {
      console.error('Failed to create goal:', error)
      // Optionally show error to user
    } finally {
      setIsCreating(false)
    }
  }

  const handleGenerateTasks = () => {
    if (!createdGoal) return

    const prompt = `Can you generate a comprehensive schedule of tasks for the next two weeks that can help me reach my goal? My goal is: ${
      createdGoal.title
    }. Description: ${
      createdGoal.description
    }. I want to complete this by ${createdGoal.completionDate.toLocaleDateString()}.`

    router.push({
      pathname: '/(tabs)/agent',
      params: {
        action: 'generate-tasks',
        prompt
      }
    })
  }

  const handleViewGoals = () => {
    router.push('/home/goals')
  }

  const formatDate = (date: Date) => {
    return date.toLocaleDateString(undefined, {
      weekday: 'long',
      year: 'numeric',
      month: 'long',
      day: 'numeric'
    })
  }

  const getTodayDateString = () => {
    const today = new Date()
    return today.toISOString().split('T')[0]
  }

  if (isSubmitted && createdGoal) {
    return (
      <View style={styles.container}>
        <Header title='Goal Created' showBackButton />

        <ScrollView
          style={styles.scrollView}
          contentContainerStyle={styles.content}
        >
          <Animated.View
            entering={FadeInDown.duration(600).delay(200)}
            style={styles.successContainer}
          >
            <View style={styles.successIcon}>
              <CheckCircle size={40} color={colors.text.primary} />
            </View>

            <Text style={styles.successTitle}>Goal Created Successfully!</Text>
            <Text style={styles.successMessage}>
              Your goal "{createdGoal.title}" has been added to your active
              goals. Would you like to generate a task schedule to help you
              achieve it?
            </Text>

            <View style={styles.successActions}>
              <TouchableOpacity
                style={[styles.successButton, styles.successButtonSecondary]}
                onPress={handleViewGoals}
                activeOpacity={0.8}
              >
                <Text
                  style={[
                    styles.successButtonText,
                    styles.successButtonTextSecondary
                  ]}
                >
                  View Goals
                </Text>
              </TouchableOpacity>

              <TouchableOpacity
                style={styles.successButton}
                onPress={handleGenerateTasks}
                activeOpacity={0.8}
              >
                <Text style={styles.successButtonText}>Generate Tasks</Text>
              </TouchableOpacity>
            </View>
          </Animated.View>
        </ScrollView>
      </View>
    )
  }

  return (
    <View style={styles.container}>
      <Header title='Create Goal' showBackButton />

      <ScrollView
        style={styles.scrollView}
        contentContainerStyle={styles.content}
        showsVerticalScrollIndicator={false}
      >
        <Animated.View
          entering={FadeInDown.duration(500).delay(100)}
          style={styles.header}
        >
          <Text style={styles.title}>Create Your Goal</Text>
          <Text style={styles.subtitle}>
            Set up a new goal with your own details and timeline
          </Text>
        </Animated.View>

        <Animated.View
          entering={FadeInDown.duration(500).delay(200)}
          style={styles.textAreaContainer}
        >
          <Text style={styles.dateLabel}>Title</Text>
          <InputField
            label=''
            value={title}
            onChangeText={setTitle}
            placeholder='e.g., Run a 5K marathon'
            maxLength={100}
            multiline
            numberOfLines={1}
          />

          <View style={styles.textAreaContainer}>
            <Text style={styles.dateLabel}>Description</Text>
            <InputField
              label=''
              value={description}
              onChangeText={setDescription}
              placeholder='Describe your goal in detail...'
              multiline
              numberOfLines={4}
              maxLength={500}
            />
          </View>

          <View style={styles.dateFieldContainer}>
            <Text style={styles.dateLabel}>Completion Date</Text>
            <TouchableOpacity onPress={handleDatePress}>
              {showDatePicker && Platform.OS !== 'web' && (
                <DateTimePicker
                  value={dueDate || new Date()}
                  mode='date'
                  display='default'
                  onChange={handleDateChange}
                  minimumDate={new Date()}
                />
              )}
              {Platform.OS === 'web' && (
                <TextInput
                  ref={webDateInputRef}
                  style={{ display: 'none' }}
                  onChange={e => handleWebDateChange(e.nativeEvent.text)}
                />
              )}
              <View style={styles.datePickerButton}>
                <Text
                  style={dueDate ? styles.pickerText : styles.pickerPlaceholder}
                >
                  {dueDate ? formatDate(dueDate) : 'Select date'}
                </Text>
                <Calendar size={20} color={colors.text.muted} />
              </View>
            </TouchableOpacity>
          </View>
        </Animated.View>

        <Animated.View
          entering={FadeInDown.duration(500).delay(300)}
          style={styles.actionButtons}
        >
          <TouchableOpacity
            style={styles.createButton}
            onPress={handleCreateGoal}
            disabled={!isFormValid || isCreating}
            activeOpacity={0.8}
          >
            <Text style={styles.createButtonText}>
              {isCreating ? 'Creating Goal...' : 'Create Goal'}
            </Text>
          </TouchableOpacity>
        </Animated.View>
      </ScrollView>
    </View>
  )
}
